{"moduleFile":{"sourceFilePath":"/Users/natemoore/Documents/professional/oss/dom-portal/src/components/portal/portal.tsx","jsFilePath":"/Users/natemoore/Documents/professional/oss/dom-portal/src/components/portal/portal.js","cmps":[{"isLegacy":false,"tagName":"dom-portal","excludeFromCollection":false,"isCollectionDependency":false,"componentClassName":"Portal","elementRef":"element","encapsulation":"shadow","properties":[{"name":"container","type":"string","attribute":"container","reflect":false,"mutable":false,"required":false,"optional":false,"complexType":{"original":"string | HTMLElement","resolved":"HTMLElement | string","references":{"HTMLElement":{"location":"global"}}},"docs":{"tags":[],"text":""},"internal":false},{"name":"portalId","type":"number","attribute":"portal-id","reflect":true,"mutable":true,"required":false,"optional":false,"complexType":{"original":"number","resolved":"number","references":{}},"docs":{"tags":[],"text":""},"internal":false},{"name":"projected","type":"boolean","attribute":"projected","reflect":true,"mutable":false,"required":false,"optional":false,"complexType":{"original":"boolean","resolved":"boolean","references":{}},"docs":{"tags":[],"text":""},"internal":false},{"name":"hosted","type":"boolean","attribute":"hosted","reflect":false,"mutable":false,"required":false,"optional":false,"complexType":{"original":"boolean","resolved":"boolean","references":{}},"docs":{"tags":[],"text":""},"internal":false}],"virtualProperties":[],"states":[],"methods":[],"listeners":[],"events":[],"watchers":[{"propName":"portalId","methodName":"portalIdChanged"}],"styles":[],"legacyConnect":[],"legacyContext":[],"internal":false,"assetsDirs":[],"styleDocs":[],"docs":{"tags":[],"text":""},"jsFilePath":"/Users/natemoore/Documents/professional/oss/dom-portal/src/components/portal/portal.js","sourceFilePath":"/Users/natemoore/Documents/professional/oss/dom-portal/src/components/portal/portal.tsx","hasAttributeChangedCallbackFn":false,"hasComponentWillLoadFn":false,"hasComponentDidLoadFn":false,"hasComponentWillUpdateFn":false,"hasComponentDidUpdateFn":false,"hasComponentWillRenderFn":false,"hasComponentDidRenderFn":false,"hasComponentDidUnloadFn":false,"hasConnectedCallbackFn":true,"hasDisconnectedCallbackFn":true,"hasElement":false,"hasEvent":false,"hasLifecycle":false,"hasListener":false,"hasListenerTarget":false,"hasListenerTargetWindow":false,"hasListenerTargetDocument":false,"hasListenerTargetBody":false,"hasListenerTargetParent":false,"hasMember":true,"hasMethod":false,"hasMode":false,"hasAttribute":true,"hasProp":true,"hasPropNumber":true,"hasPropBoolean":true,"hasPropString":true,"hasPropMutable":true,"hasReflect":true,"hasRenderFn":true,"hasState":false,"hasStyle":false,"hasVdomAttribute":true,"hasVdomClass":false,"hasVdomFunctional":true,"hasVdomKey":false,"hasVdomListener":false,"hasVdomRef":false,"hasVdomRender":true,"hasVdomStyle":true,"hasVdomText":false,"hasWatchCallback":true,"isPlain":false,"htmlAttrNames":["style"],"htmlTagNames":["slot"],"isUpdateable":true,"potentialCmpRefs":[]}],"collectionName":null,"dtsFilePath":null,"excludeFromCollection":false,"externalImports":["@stencil/core"],"hasVdomAttribute":true,"hasVdomClass":true,"hasVdomFunctional":true,"hasVdomKey":true,"hasVdomListener":true,"hasVdomRef":true,"hasVdomRender":false,"hasVdomStyle":true,"hasVdomText":true,"htmlAttrNames":[],"htmlTagNames":[],"isCollectionDependency":false,"isLegacy":false,"localImports":[],"originalCollectionComponentPath":null,"potentialCmpRefs":[]},"jsText":"import { h, Host } from '@stencil/core';\r\nexport class Portal {\r\n    constructor() {\r\n        this.getContainer = (ownerDocument) => {\r\n            if (this.container) {\r\n                return typeof this.container === 'string' ? ownerDocument.querySelector(this.container) : this.container;\r\n            }\r\n            return ownerDocument.body;\r\n        };\r\n        this.parent = null;\r\n        this.project = () => {\r\n            if (!this.projected) {\r\n                let content = [];\r\n                if (this.parent) {\r\n                    content = [...Array.from(this.parent.children)];\r\n                    content.map(el => this.portalNode.shadowRoot.querySelector('dom-portal').appendChild(el));\r\n                    return;\r\n                }\r\n                content = this.element.shadowRoot.querySelector('slot').assignedNodes();\r\n                content.map(el => this.portalNode.appendChild(el));\r\n            }\r\n        };\r\n    }\r\n    portalIdChanged() {\r\n        if (!this.projected && this.portalNode) {\r\n            this.portalNode.portalId = this.portalId;\r\n        }\r\n    }\r\n    connectedCallback() {\r\n        if (!this.projected && this.element) {\r\n            this.portalId = onPortalConnected(this.element);\r\n            if (document.querySelector(`[portal-id=\"${this.portalId}\"]`)) {\r\n                return;\r\n            }\r\n        }\r\n        if (!this.projected) {\r\n            const ownerDocument = this.element.ownerDocument;\r\n            const container = this.getContainer(ownerDocument);\r\n            if (this.element.parentElement === null && this.element.parentNode && this.element.parentNode.host) {\r\n                const parent = this.element.parentNode.host;\r\n                this.portalNode = ownerDocument.createElement(parent.tagName);\r\n                parent.setAttribute('portal-id', `${this.portalId}`);\r\n                this.portalNode.setAttribute('portal-id', `${this.portalId}`);\r\n                this.portalNode.setAttribute('projected', '');\r\n                [...Array.from(parent.children)].forEach(child => this.portalNode.appendChild(child));\r\n                container.appendChild(this.portalNode);\r\n                this.addMO(parent);\r\n                this.parent = parent;\r\n            }\r\n            else {\r\n                this.portalNode = ownerDocument.createElement(this.element.tagName);\r\n                this.portalNode.setAttribute('projected', '');\r\n                this.portalNode.setAttribute('portal-id', `${this.portalId}`);\r\n                container.appendChild(this.portalNode);\r\n                this.addMO();\r\n            }\r\n        }\r\n    }\r\n    disconnectedCallback() {\r\n        if (!this.projected) {\r\n            this.portalNode.remove();\r\n            onPortalDisconnected(this.portalId);\r\n        }\r\n    }\r\n    addMO(element = this.element) {\r\n        if ('MutationObserver' in window) {\r\n            this.mo = new MutationObserver(this.project);\r\n            this.mo.observe(element, {\r\n                childList: true,\r\n                attributes: true,\r\n                subtree: true\r\n            });\r\n        }\r\n    }\r\n    render() {\r\n        if (this.projected) {\r\n            return (h(Host, { style: { display: 'contents' } },\r\n                h(\"slot\", null)));\r\n        }\r\n        return (h(Host, { style: { display: 'none' } },\r\n            h(\"slot\", null)));\r\n    }\r\n    static get is() { return \"dom-portal\"; }\r\n    static get encapsulation() { return \"shadow\"; }\r\n    static get properties() { return {\r\n        \"container\": {\r\n            \"type\": \"string\",\r\n            \"mutable\": false,\r\n            \"complexType\": {\r\n                \"original\": \"string | HTMLElement\",\r\n                \"resolved\": \"HTMLElement | string\",\r\n                \"references\": {\r\n                    \"HTMLElement\": {\r\n                        \"location\": \"global\"\r\n                    }\r\n                }\r\n            },\r\n            \"required\": false,\r\n            \"optional\": false,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"attribute\": \"container\",\r\n            \"reflect\": false\r\n        },\r\n        \"portalId\": {\r\n            \"type\": \"number\",\r\n            \"mutable\": true,\r\n            \"complexType\": {\r\n                \"original\": \"number\",\r\n                \"resolved\": \"number\",\r\n                \"references\": {}\r\n            },\r\n            \"required\": false,\r\n            \"optional\": false,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"attribute\": \"portal-id\",\r\n            \"reflect\": true\r\n        },\r\n        \"projected\": {\r\n            \"type\": \"boolean\",\r\n            \"mutable\": false,\r\n            \"complexType\": {\r\n                \"original\": \"boolean\",\r\n                \"resolved\": \"boolean\",\r\n                \"references\": {}\r\n            },\r\n            \"required\": false,\r\n            \"optional\": false,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"attribute\": \"projected\",\r\n            \"reflect\": true\r\n        },\r\n        \"hosted\": {\r\n            \"type\": \"boolean\",\r\n            \"mutable\": false,\r\n            \"complexType\": {\r\n                \"original\": \"boolean\",\r\n                \"resolved\": \"boolean\",\r\n                \"references\": {}\r\n            },\r\n            \"required\": false,\r\n            \"optional\": false,\r\n            \"docs\": {\r\n                \"tags\": [],\r\n                \"text\": \"\"\r\n            },\r\n            \"attribute\": \"hosted\",\r\n            \"reflect\": false\r\n        }\r\n    }; }\r\n    static get elementRef() { return \"element\"; }\r\n    static get watchers() { return [{\r\n            \"propName\": \"portalId\",\r\n            \"methodName\": \"portalIdChanged\"\r\n        }]; }\r\n}\r\nfunction onPortalConnected(element) {\r\n    portals.push(element);\r\n    return portals.length - 1;\r\n}\r\nfunction onPortalDisconnected(id) {\r\n    portals.splice(portals.findIndex(p => p.portalId === id), 1);\r\n    portals.forEach((portal, i) => {\r\n        portal.portalId = i;\r\n    });\r\n}\r\nlet portals = [];\r\n"}